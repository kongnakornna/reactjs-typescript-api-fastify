/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { fastify } from 'fastify';
import { defaultScope } from '../decorators/helpers/dependency-scope.js';
import { classLoaderFactory } from '../decorators/helpers/inject-dependencies.js';
import { readyMap } from '../decorators/index.js';
import { _injectablesHolder } from '../registry/_injectables-holder.js';
import { CLASS_LOADER, CREATOR, FastifyInstanceToken, INITIALIZER } from '../symbols/index.js';
import { loadPlugins } from './fastify-plugins.js';
import { MocksManager } from './mocks-manager.js';
/**
 * Configures service for testing
 * @param config with service and mocks
 * @returns configured service & promise which resolves when async initializer done (if it exists, otherwise resolved)
 */
export function configureServiceTest(config) {
    const service = config.service;
    isInjectable(service);
    const injectablesWithMocks = MocksManager.create(_injectablesHolder, config.mocks);
    if (config.instance)
        injectablesWithMocks.injectSingleton(FastifyInstanceToken, config.instance);
    if (!injectablesWithMocks.has(FastifyInstanceToken))
        injectablesWithMocks.injectSingleton(FastifyInstanceToken, fastify(), false);
    const fastifyInstance = injectablesWithMocks.getSingleton(FastifyInstanceToken);
    const classLoader = classLoaderFactory(injectablesWithMocks);
    classLoader.reset(defaultScope);
    if (!fastifyInstance.hasDecorator(CLASS_LOADER))
        fastifyInstance.decorate(CLASS_LOADER, classLoader);
    loadPlugins(fastifyInstance, config.plugins);
    const instance = service[CREATOR].register(classLoader);
    let promise = null;
    // @ts-expect-error TS doesn't know that we have class instance here
    return new Proxy(instance, {
        get(target, p) {
            if (p === 'then' || p === 'catch' || p === 'finally') {
                if (promise == null)
                    promise = hasAsyncInitializer(service)
                        ? // @ts-expect-error if service has async initializer then it exists in readyMap
                            readyMap.get(service).then(() => target)
                        : Promise.resolve(target);
                return promise[p].bind(promise);
            }
            return target[p];
        },
    });
}
function isInjectable(service) {
    if (!(CREATOR in service)) {
        throw new Error('Provided service does not annotated with @Service!');
    }
}
function hasAsyncInitializer(service) {
    return INITIALIZER in service;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLXNlcnZpY2UtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi90ZXN0aW5nL2NvbmZpZ3VyZS1zZXJ2aWNlLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFFLE9BQU8sRUFBbUIsTUFBTSxTQUFTLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBbUIsTUFBTSwyQ0FBMkMsQ0FBQztBQUUxRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFHbEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0YsT0FBTyxFQUFFLFdBQVcsRUFBVyxNQUFNLHNCQUFzQixDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQVVsRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFVLE1BQWtDO0lBQzlFLE1BQU0sT0FBTyxHQUF5QixNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ3JELFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV0QixNQUFNLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25GLElBQUksTUFBTSxDQUFDLFFBQVE7UUFBRSxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7UUFBRSxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFbEksTUFBTSxlQUFlLEdBQUcsb0JBQW9CLENBQUMsWUFBWSxDQUFrQixvQkFBb0IsQ0FBb0IsQ0FBQztJQUNwSCxNQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBMEQsQ0FBQztJQUN0SCxXQUFXLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztRQUFFLGVBQWUsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRXJHLFdBQVcsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTdDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQVUsV0FBVyxDQUFDLENBQUM7SUFFakUsSUFBSSxPQUFPLEdBQTRCLElBQUksQ0FBQztJQUU1QyxvRUFBb0U7SUFDcEUsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7UUFDekIsR0FBRyxDQUFJLE1BQVMsRUFBRSxDQUF5QztZQUN6RCxJQUFJLENBQUMsS0FBSyxNQUFNLElBQUksQ0FBQyxLQUFLLE9BQU8sSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUNwRCxJQUFJLE9BQU8sSUFBSSxJQUFJO29CQUNqQixPQUFPLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDO3dCQUNwQyxDQUFDLENBQUMsK0VBQStFOzRCQUMvRSxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7d0JBQzFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUU5QixPQUFPLE9BQU8sQ0FBQyxDQUFpQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2pFO1lBRUQsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsQ0FBQztLQUNGLENBQStCLENBQUM7QUFDbkMsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFVLE9BQTZCO0lBQzFELElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7S0FDdkU7QUFDSCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxPQUEwQjtJQUNyRCxPQUFPLFdBQVcsSUFBSSxPQUFPLENBQUM7QUFDaEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbmRyZXkgQ2hhbGtpbiA8TDJqTGlnYUBnbWFpbC5jb20+IChodHRwczovL2dpdGh1Yi5jb20vTDJqTGlnYSkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL0wyakxpZ2EvZmFzdGlmeS1kZWNvcmF0b3JzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBmYXN0aWZ5LCBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tICdmYXN0aWZ5JztcbmltcG9ydCB7IGRlZmF1bHRTY29wZSwgRGVwZW5kZW5jeVNjb3BlIH0gZnJvbSAnLi4vZGVjb3JhdG9ycy9oZWxwZXJzL2RlcGVuZGVuY3ktc2NvcGUuanMnO1xuaW1wb3J0IHR5cGUgeyBDb25zdHJ1Y3RvciB9IGZyb20gJy4uL2RlY29yYXRvcnMvaGVscGVycy9pbmplY3QtZGVwZW5kZW5jaWVzLmpzJztcbmltcG9ydCB7IGNsYXNzTG9hZGVyRmFjdG9yeSB9IGZyb20gJy4uL2RlY29yYXRvcnMvaGVscGVycy9pbmplY3QtZGVwZW5kZW5jaWVzLmpzJztcbmltcG9ydCB7IHJlYWR5TWFwIH0gZnJvbSAnLi4vZGVjb3JhdG9ycy9pbmRleC5qcyc7XG5pbXBvcnQgeyBDbGFzc0xvYWRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvYm9vdHN0cmFwLWNvbmZpZy5qcyc7XG5pbXBvcnQgdHlwZSB7IEluamVjdGFibGVTZXJ2aWNlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pbmplY3RhYmxlLWNsYXNzLmpzJztcbmltcG9ydCB7IF9pbmplY3RhYmxlc0hvbGRlciB9IGZyb20gJy4uL3JlZ2lzdHJ5L19pbmplY3RhYmxlcy1ob2xkZXIuanMnO1xuaW1wb3J0IHsgQ0xBU1NfTE9BREVSLCBDUkVBVE9SLCBGYXN0aWZ5SW5zdGFuY2VUb2tlbiwgSU5JVElBTElaRVIgfSBmcm9tICcuLi9zeW1ib2xzL2luZGV4LmpzJztcbmltcG9ydCB7IGxvYWRQbHVnaW5zLCBQbHVnaW5zIH0gZnJvbSAnLi9mYXN0aWZ5LXBsdWdpbnMuanMnO1xuaW1wb3J0IHsgTW9ja3NNYW5hZ2VyIH0gZnJvbSAnLi9tb2Nrcy1tYW5hZ2VyLmpzJztcbmltcG9ydCB0eXBlIHsgU2VydmljZU1vY2sgfSBmcm9tICcuL3NlcnZpY2UtbW9jay5qcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmljZVRlc3RDb25maWc8U2VydmljZT4ge1xuICBzZXJ2aWNlOiBDb25zdHJ1Y3RvcjxTZXJ2aWNlPjtcbiAgaW5zdGFuY2U/OiBGYXN0aWZ5SW5zdGFuY2U7XG4gIG1vY2tzPzogU2VydmljZU1vY2tbXTtcbiAgcGx1Z2lucz86IFBsdWdpbnM7XG59XG5cbi8qKlxuICogQ29uZmlndXJlcyBzZXJ2aWNlIGZvciB0ZXN0aW5nXG4gKiBAcGFyYW0gY29uZmlnIHdpdGggc2VydmljZSBhbmQgbW9ja3NcbiAqIEByZXR1cm5zIGNvbmZpZ3VyZWQgc2VydmljZSAmIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgd2hlbiBhc3luYyBpbml0aWFsaXplciBkb25lIChpZiBpdCBleGlzdHMsIG90aGVyd2lzZSByZXNvbHZlZClcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZVNlcnZpY2VUZXN0PFNlcnZpY2U+KGNvbmZpZzogU2VydmljZVRlc3RDb25maWc8U2VydmljZT4pOiBQcm9taXNlPFNlcnZpY2U+ICYgU2VydmljZSB7XG4gIGNvbnN0IHNlcnZpY2U6IENvbnN0cnVjdG9yPFNlcnZpY2U+ID0gY29uZmlnLnNlcnZpY2U7XG4gIGlzSW5qZWN0YWJsZShzZXJ2aWNlKTtcblxuICBjb25zdCBpbmplY3RhYmxlc1dpdGhNb2NrcyA9IE1vY2tzTWFuYWdlci5jcmVhdGUoX2luamVjdGFibGVzSG9sZGVyLCBjb25maWcubW9ja3MpO1xuICBpZiAoY29uZmlnLmluc3RhbmNlKSBpbmplY3RhYmxlc1dpdGhNb2Nrcy5pbmplY3RTaW5nbGV0b24oRmFzdGlmeUluc3RhbmNlVG9rZW4sIGNvbmZpZy5pbnN0YW5jZSk7XG4gIGlmICghaW5qZWN0YWJsZXNXaXRoTW9ja3MuaGFzKEZhc3RpZnlJbnN0YW5jZVRva2VuKSkgaW5qZWN0YWJsZXNXaXRoTW9ja3MuaW5qZWN0U2luZ2xldG9uKEZhc3RpZnlJbnN0YW5jZVRva2VuLCBmYXN0aWZ5KCksIGZhbHNlKTtcblxuICBjb25zdCBmYXN0aWZ5SW5zdGFuY2UgPSBpbmplY3RhYmxlc1dpdGhNb2Nrcy5nZXRTaW5nbGV0b248RmFzdGlmeUluc3RhbmNlPihGYXN0aWZ5SW5zdGFuY2VUb2tlbikgYXMgRmFzdGlmeUluc3RhbmNlO1xuICBjb25zdCBjbGFzc0xvYWRlciA9IGNsYXNzTG9hZGVyRmFjdG9yeShpbmplY3RhYmxlc1dpdGhNb2NrcykgYXMgQ2xhc3NMb2FkZXIgJiB7IHJlc2V0KHNjb3BlOiBEZXBlbmRlbmN5U2NvcGUpOiB2b2lkIH07XG4gIGNsYXNzTG9hZGVyLnJlc2V0KGRlZmF1bHRTY29wZSk7XG4gIGlmICghZmFzdGlmeUluc3RhbmNlLmhhc0RlY29yYXRvcihDTEFTU19MT0FERVIpKSBmYXN0aWZ5SW5zdGFuY2UuZGVjb3JhdGUoQ0xBU1NfTE9BREVSLCBjbGFzc0xvYWRlcik7XG5cbiAgbG9hZFBsdWdpbnMoZmFzdGlmeUluc3RhbmNlLCBjb25maWcucGx1Z2lucyk7XG5cbiAgY29uc3QgaW5zdGFuY2UgPSBzZXJ2aWNlW0NSRUFUT1JdLnJlZ2lzdGVyPFNlcnZpY2U+KGNsYXNzTG9hZGVyKTtcblxuICBsZXQgcHJvbWlzZTogUHJvbWlzZTx1bmtub3duPiB8IG51bGwgPSBudWxsO1xuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgZG9lc24ndCBrbm93IHRoYXQgd2UgaGF2ZSBjbGFzcyBpbnN0YW5jZSBoZXJlXG4gIHJldHVybiBuZXcgUHJveHkoaW5zdGFuY2UsIHtcbiAgICBnZXQ8VD4odGFyZ2V0OiBULCBwOiBrZXlvZiBUIHwgJ3RoZW4nIHwgJ2NhdGNoJyB8ICdmaW5hbGx5Jykge1xuICAgICAgaWYgKHAgPT09ICd0aGVuJyB8fCBwID09PSAnY2F0Y2gnIHx8IHAgPT09ICdmaW5hbGx5Jykge1xuICAgICAgICBpZiAocHJvbWlzZSA9PSBudWxsKVxuICAgICAgICAgIHByb21pc2UgPSBoYXNBc3luY0luaXRpYWxpemVyKHNlcnZpY2UpXG4gICAgICAgICAgICA/IC8vIEB0cy1leHBlY3QtZXJyb3IgaWYgc2VydmljZSBoYXMgYXN5bmMgaW5pdGlhbGl6ZXIgdGhlbiBpdCBleGlzdHMgaW4gcmVhZHlNYXBcbiAgICAgICAgICAgICAgcmVhZHlNYXAuZ2V0KHNlcnZpY2UpLnRoZW4oKCkgPT4gdGFyZ2V0KVxuICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUodGFyZ2V0KTtcblxuICAgICAgICByZXR1cm4gcHJvbWlzZVtwIGFzICd0aGVuJyB8ICdjYXRjaCcgfCAnZmluYWxseSddLmJpbmQocHJvbWlzZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRbcF07XG4gICAgfSxcbiAgfSkgYXMgUHJvbWlzZTxTZXJ2aWNlPiAmIFNlcnZpY2U7XG59XG5cbmZ1bmN0aW9uIGlzSW5qZWN0YWJsZTxTZXJ2aWNlPihzZXJ2aWNlOiBDb25zdHJ1Y3RvcjxTZXJ2aWNlPik6IGFzc2VydHMgc2VydmljZSBpcyBJbmplY3RhYmxlU2VydmljZSB7XG4gIGlmICghKENSRUFUT1IgaW4gc2VydmljZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3ZpZGVkIHNlcnZpY2UgZG9lcyBub3QgYW5ub3RhdGVkIHdpdGggQFNlcnZpY2UhJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzQXN5bmNJbml0aWFsaXplcihzZXJ2aWNlOiBJbmplY3RhYmxlU2VydmljZSk6IHNlcnZpY2UgaXMgSW5qZWN0YWJsZVNlcnZpY2UgJiBSZXF1aXJlZDxJbmplY3RhYmxlU2VydmljZT4ge1xuICByZXR1cm4gSU5JVElBTElaRVIgaW4gc2VydmljZTtcbn1cbiJdfQ==
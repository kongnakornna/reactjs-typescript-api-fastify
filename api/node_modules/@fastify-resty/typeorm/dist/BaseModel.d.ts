import type { IFindQuery, IFindWhereQuery, IBaseModel, Identifier, ModifyResponse, IModelConfig, IModelOptions } from '@fastify-resty/core';
import type { JSONSchema7 } from 'json-schema';
import type { ObjectType, Connection } from 'typeorm';
export declare class BaseModel<E extends object = any> implements IBaseModel<E> {
    protected EntityClass: ObjectType<E>;
    static connection: Connection;
    constructor(EntityClass: ObjectType<E>, config?: IModelOptions);
    config: IModelConfig;
    get name(): string;
    get jsonSchema(): Record<string, JSONSchema7>;
    find(query?: IFindQuery): Promise<E[]>;
    total(query?: IFindWhereQuery): Promise<number>;
    create(data: E | E[]): Promise<{
        identifiers: Identifier[];
    }>;
    patch(query: IFindWhereQuery, raw: Partial<E>): Promise<ModifyResponse>;
    update(query: IFindWhereQuery, raw: E): Promise<ModifyResponse>;
    remove(query: IFindWhereQuery): Promise<ModifyResponse>;
}

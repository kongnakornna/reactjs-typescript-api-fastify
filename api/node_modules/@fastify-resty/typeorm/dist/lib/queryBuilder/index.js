"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSelectQueryBuilder = exports.whereBuilder = void 0;
const tslib_1 = require("tslib");
const typeorm_1 = require("typeorm");
const operations_1 = tslib_1.__importDefault(require("./operations"));
exports.whereBuilder = (_query, _where) => {
    let isWhereUsed;
    const getWhere = (prefix = 'and') => isWhereUsed ? `${prefix}Where` : isWhereUsed = 'where';
    const andWhere = (where, params) => _query[getWhere()](where, params);
    Object.entries(_where)
        .filter(([key]) => key[0] !== '$')
        .forEach(([key, value]) => {
        if (typeof value === 'object') {
            Object.entries(value).forEach(([k, v]) => {
                andWhere(...operations_1.default[k](key, v));
            });
        }
        else {
            andWhere(...operations_1.default['$eq'](key, value));
        }
    });
    if (_where.$or) {
        andWhere(new typeorm_1.Brackets(qb => {
            isWhereUsed = null;
            _where.$or.forEach(nestedWhere => {
                qb[getWhere('or')](new typeorm_1.Brackets(orqb => {
                    exports.whereBuilder(orqb, nestedWhere);
                }));
            });
        }));
    }
};
exports.createSelectQueryBuilder = (connection, entityClass, query = {}) => {
    const _query = connection
        .getRepository(entityClass)
        .createQueryBuilder('entity');
    if (query.$select) {
        const select = Array.isArray(query.$select) ? query.$select : [query.$select];
        _query.select(select.map(field => `entity.${field}`));
    }
    if (query.$sort) {
        if (typeof query.$sort === 'string') {
            _query.orderBy(`entity.${query.$sort}`);
        }
        else if (Array.isArray(query.$sort)) {
            const orderOptions = query.$sort.reduce((acc, curr) => (Object.assign(Object.assign({}, acc), { [`entity.${curr}`]: 'ASC' })), {});
            _query.orderBy(orderOptions);
        }
        else if (typeof query.$sort === 'object') {
            _query.orderBy(query.$sort);
        }
    }
    if (query.$where) {
        exports.whereBuilder(_query, query.$where);
    }
    if (query.$skip) {
        _query.skip(query.$skip);
    }
    if (query.$limit !== null) {
        _query.take(query.$limit || 20);
    }
    return _query;
};

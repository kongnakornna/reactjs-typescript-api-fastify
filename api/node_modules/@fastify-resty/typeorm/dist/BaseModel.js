"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseModel = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const mapProperty_1 = tslib_1.__importDefault(require("./lib/mapProperty"));
const queryBuilder_1 = require("./lib/queryBuilder");
class BaseModel {
    constructor(EntityClass, config) {
        this.EntityClass = EntityClass;
        this.config = Object.assign({ id: 'id', softDelete: false }, (config || {}));
    }
    get name() {
        return this.EntityClass.name;
    }
    get jsonSchema() {
        const { columns } = BaseModel.connection.getMetadata(this.EntityClass);
        return columns.reduce((props, column) => (Object.assign(Object.assign({}, props), { [column.propertyName]: mapProperty_1.default(column) })), {});
    }
    find(query) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return queryBuilder_1.createSelectQueryBuilder(BaseModel.connection, this.EntityClass, query).getMany();
        });
    }
    total(query) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const _queryBuilder = BaseModel.connection
                .getRepository(this.EntityClass)
                .createQueryBuilder('entity');
            if (query) {
                queryBuilder_1.whereBuilder(_queryBuilder, query);
            }
            return _queryBuilder.getCount();
        });
    }
    create(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const result = yield BaseModel.connection
                .createQueryBuilder()
                .insert()
                .into(this.EntityClass)
                .values(data)
                .execute();
            return { identifiers: lodash_1.default.map(result.identifiers, this.config.id) };
        });
    }
    patch(query, raw) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const data = lodash_1.default.omit(raw, this.config.id);
            const _queryBuilder = BaseModel.connection
                .createQueryBuilder()
                .update(this.EntityClass)
                .set(data);
            queryBuilder_1.whereBuilder(_queryBuilder, query);
            return { affected: lodash_1.default.get(yield _queryBuilder.execute(), 'affected') };
        });
    }
    update(query, raw) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const data = BaseModel.connection
                .getMetadata(this.EntityClass)
                .columns
                .reduce((data, column) => {
                if (column.isPrimary && raw[column.propertyName] === undefined) {
                    return data;
                }
                if ((column.isCreateDate || column.isUpdateDate || column.isDeleteDate) && raw[column.propertyName] === undefined) {
                    return Object.assign(Object.assign({}, data), { [column.propertyName]: new Date() });
                }
                return Object.assign(Object.assign({}, data), { [column.propertyName]: raw[column.propertyName] });
            }, {});
            const _queryBuilder = BaseModel.connection
                .createQueryBuilder()
                .update(this.EntityClass)
                .set(data);
            queryBuilder_1.whereBuilder(_queryBuilder, query);
            return { affected: lodash_1.default.get(yield _queryBuilder.execute(), 'affected') };
        });
    }
    remove(query) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const _queryBuilder = BaseModel.connection
                .createQueryBuilder()
                .delete()
                .from(this.EntityClass);
            queryBuilder_1.whereBuilder(_queryBuilder, query);
            return { affected: lodash_1.default.get(yield _queryBuilder.execute(), 'affected') };
        });
    }
}
exports.BaseModel = BaseModel;

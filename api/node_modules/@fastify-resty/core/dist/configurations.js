"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllowedMethods = exports.createControllerConfig = exports.createAppConfig = void 0;
const helpers_1 = require("./helpers");
const defaultPagination = { limit: 20, total: true };
exports.createAppConfig = (options) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const pagination = typeof ((_a = options.defaults) === null || _a === void 0 ? void 0 : _a.pagination) === 'boolean'
        ? ((_b = options.defaults) === null || _b === void 0 ? void 0 : _b.pagination) && defaultPagination
        : Object.assign(Object.assign({}, defaultPagination), helpers_1.get((_c = options.defaults) === null || _c === void 0 ? void 0 : _c.pagination, {}));
    return {
        controllers: options.controllers,
        entry: options.entry,
        pattern: options.pattern || /\.controller\.[jt]s$/,
        defaults: {
            pagination,
            id: ((_d = options.defaults) === null || _d === void 0 ? void 0 : _d.id) || 'id',
            softDelete: Boolean((_e = options.defaults) === null || _e === void 0 ? void 0 : _e.softDelete),
            methods: (_f = options.defaults) === null || _f === void 0 ? void 0 : _f.methods,
            allowMulti: helpers_1.get((_g = options.defaults) === null || _g === void 0 ? void 0 : _g.allowMulti, true),
            returning: helpers_1.get((_h = options.defaults) === null || _h === void 0 ? void 0 : _h.returning, true)
        }
    };
};
exports.createControllerConfig = (options = {}, defaults) => {
    let pagination;
    if (typeof options.pagination === 'boolean') {
        pagination = options.pagination && defaultPagination;
    }
    else if (typeof options.pagination === 'object') {
        pagination = Object.assign(Object.assign({}, (defaults.pagination || {})), options.pagination);
    }
    else {
        pagination = defaults.pagination;
    }
    return Object.assign({}, defaults, options, { pagination });
};
exports.getAllowedMethods = (config) => {
    let allowedMethods = ['find', 'findOne', 'create', 'patch', 'patchOne', 'update', 'updateOne', 'remove', 'removeOne'];
    if (!config.allowMulti) {
        const multiMethods = ['find', 'patch', 'update', 'remove'];
        allowedMethods = allowedMethods.filter(key => !multiMethods.includes(key));
    }
    if (config.methods) {
        allowedMethods = allowedMethods.filter(key => config.methods.includes(key));
    }
    return allowedMethods;
};

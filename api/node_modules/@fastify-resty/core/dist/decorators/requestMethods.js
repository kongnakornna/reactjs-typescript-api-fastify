"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ALL = exports.DELETE = exports.OPTIONS = exports.PUT = exports.POST = exports.PATCH = exports.HEAD = exports.GET = void 0;
const httpMethods = ['DELETE', 'GET', 'HEAD', 'PATCH', 'POST', 'PUT', 'OPTIONS'];
function requestMethodFactory(methods, url, options) {
    return function (target, propertyKey) {
        const method = typeof methods === 'string' || (Array.isArray(methods) && methods.length > 0) ? methods : httpMethods;
        Reflect.defineMetadata('fastify-resty:handler', Object.assign({ url, method }, options), target, propertyKey);
        if (Reflect.hasMetadata('fastify-resty:handlers', target)) {
            const handlers = Reflect.getMetadata('fastify-resty:handlers', target);
            handlers.add(propertyKey.toString());
        }
        else {
            Reflect.defineMetadata('fastify-resty:handlers', new Set([propertyKey]), target);
        }
    };
}
function GET(route, options) {
    return requestMethodFactory('GET', route, options);
}
exports.GET = GET;
function HEAD(route, options) {
    return requestMethodFactory('HEAD', route, options);
}
exports.HEAD = HEAD;
function PATCH(route, options) {
    return requestMethodFactory('PATCH', route, options);
}
exports.PATCH = PATCH;
function POST(route, options) {
    return requestMethodFactory('POST', route, options);
}
exports.POST = POST;
function PUT(route, options) {
    return requestMethodFactory('PUT', route, options);
}
exports.PUT = PUT;
function OPTIONS(route, options) {
    return requestMethodFactory('OPTIONS', route, options);
}
exports.OPTIONS = OPTIONS;
function DELETE(route, options) {
    return requestMethodFactory('DELETE', route, options);
}
exports.DELETE = DELETE;
function ALL(route, methods, options) {
    return requestMethodFactory(methods, route, options);
}
exports.ALL = ALL;

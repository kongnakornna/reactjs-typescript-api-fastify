"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schemaDefinitions = void 0;
const queryProperties = (type) => ({
    $eq: { type },
    $neq: { type },
    $gt: { type },
    $gte: { type },
    $lt: { type },
    $lte: { type },
    $like: { type: 'string' },
    $nlike: { type: 'string' },
    $ilike: { type: 'string' },
    $nilike: { type: 'string' },
    $regex: { type: 'string' },
    $nregex: { type: 'string' },
    $in: { type: 'array', items: { type } },
    $nin: { type: 'array', items: { type } },
    $between: { type: 'array', items: [{ type }, { type }] },
    $nbetween: { type: 'array', items: [{ type }, { type }] }
});
const isRequired = (property) => { var _a, _b; return !property.default && !((_a = property._options) === null || _a === void 0 ? void 0 : _a.generated) && !((_b = property._options) === null || _b === void 0 ? void 0 : _b.nullable); };
exports.schemaDefinitions = (schemaProperties) => ({
    definitions: {
        entity: {
            type: 'object',
            properties: Object.keys(schemaProperties)
                .filter(key => { var _a; return !((_a = schemaProperties[key]._options) === null || _a === void 0 ? void 0 : _a.hidden); })
                .reduce((props, key) => (Object.assign(Object.assign({}, props), { [key]: schemaProperties[key] })), {}),
            required: Object.keys(schemaProperties)
                .reduce((required, key) => [...required, ...(isRequired(schemaProperties[key]) ? [key] : [])], [])
        },
        query: {
            type: 'object',
            properties: Object.keys(schemaProperties)
                .filter(key => { var _a; return !schemaProperties[key].writeOnly && !((_a = schemaProperties[key]._options) === null || _a === void 0 ? void 0 : _a.hidden); })
                .reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [key]: {
                    type: ['string', 'number', 'object'],
                    properties: queryProperties(['string', 'number'].includes(schemaProperties[key].type.toString())
                        ? schemaProperties[key].type
                        : ['number', 'string'])
                } })), {
                $or: {
                    type: 'array',
                    items: {
                        $ref: '#/definitions/query'
                    }
                }
            })
        }
    }
});

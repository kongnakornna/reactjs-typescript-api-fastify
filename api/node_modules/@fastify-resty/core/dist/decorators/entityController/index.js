"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityController = void 0;
const tslib_1 = require("tslib");
const hooks_1 = tslib_1.__importDefault(require("./hooks"));
const methods_1 = tslib_1.__importDefault(require("./methods"));
const routes_1 = tslib_1.__importDefault(require("./routes"));
const configurations_1 = require("../../configurations");
const schemaBuilder_1 = require("./schemaBuilder");
const symbols_1 = require("../../symbols");
function EntityController(Entity, route, options) {
    return function (target) {
        const origin = target;
        const handlersSet = Reflect.getMetadata('fastify-resty:handlers', origin.prototype) || new Set();
        const hooksSet = Reflect.getMetadata('fastify-resty:hooks', origin.prototype) || new Set();
        origin.prototype[symbols_1.Initialize] = function (fastifyInstance, defaultConfig) {
            if (!fastifyInstance.BaseModel && typeof fastifyInstance !== 'function') {
                throw new Error('Database connector is not bootstrapped! Missing Model class');
            }
            this.config = configurations_1.createControllerConfig(options, defaultConfig);
            this.model = new fastifyInstance.BaseModel(Entity, this.config);
            const { jsonSchema } = this.model;
            const definitions = schemaBuilder_1.schemaDefinitions(jsonSchema);
            Reflect.defineMetadata('fastify-resty:definitions', definitions, origin.prototype);
            const routeSchemas = schemaBuilder_1.baseSchema(`/${this.model.name}.json`, jsonSchema);
            const routeOptions = routes_1.default(routeSchemas);
            Object.keys(methods_1.default).forEach(methodKey => {
                Reflect.defineProperty(origin.prototype, methodKey, {
                    enumerable: true,
                    value: methods_1.default[methodKey]
                });
                handlersSet.add(methodKey);
                Reflect.defineMetadata('fastify-resty:handler', routeOptions[methodKey], origin.prototype, methodKey);
            });
            if (!this.config.allowMulti || Array.isArray(this.config.methods)) {
                const hookHandlerKey = 'validateAllowedMethods';
                Reflect.defineProperty(origin.prototype, hookHandlerKey, {
                    enumerable: true,
                    value: hooks_1.default[hookHandlerKey].handler(routeOptions, route)
                });
                hooksSet.add(hookHandlerKey);
                Reflect.defineMetadata('fastify-resty:hook', { event: 'onRequest' }, origin.prototype, hookHandlerKey);
            }
        };
        Reflect.defineMetadata('fastify-resty:controller', { Entity, route }, origin.prototype);
        Reflect.defineMetadata('fastify-resty:handlers', handlersSet, origin.prototype);
        Reflect.defineMetadata('fastify-resty:hooks', hooksSet, origin.prototype);
        return origin;
    };
}
exports.EntityController = EntityController;

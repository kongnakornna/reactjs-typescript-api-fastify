import type { FastifyRequest } from 'fastify';
import type { IFindQuery, IFindWhereQuery, Identifier } from '../../types';
declare type Entity = any;
declare const _default: {
    find(request: FastifyRequest<{
        Querystring: IFindQuery;
    }>): Promise<{
        data: any;
        skip?: undefined;
        limit?: undefined;
        total?: undefined;
    } | {
        data: any;
        skip: number;
        limit: number;
        total: any;
    }>;
    findOne(request: FastifyRequest<{
        Params: {
            id: Identifier;
        };
    }>): Promise<any>;
    create(request: FastifyRequest<{
        Body: Entity;
        Querystring: {
            $results: boolean;
        };
    }>): Promise<any>;
    patch(request: FastifyRequest<{
        Body: Entity;
        Querystring: IFindWhereQuery & {
            $results?: boolean;
        };
    }>): Promise<any>;
    patchOne(request: FastifyRequest<{
        Params: {
            id: Identifier;
        };
        Body: Entity;
        Querystring: {
            $results: boolean;
        };
    }>): Promise<any>;
    update(request: FastifyRequest<{
        Body: Entity;
        Querystring: IFindWhereQuery | {
            $results: boolean;
        };
    }>): Promise<any>;
    updateOne(request: FastifyRequest<{
        Params: {
            id: Identifier;
        };
        Body: Entity;
        Querystring: {
            $results: boolean;
        };
    }>): Promise<any>;
    remove(request: FastifyRequest<{
        Querystring: IFindWhereQuery | {
            $results: boolean;
        };
    }>): Promise<any>;
    removeOne(request: FastifyRequest<{
        Params: {
            id: Identifier;
        };
        Querystring: {
            $results: boolean;
        };
    }>): Promise<any>;
};
export default _default;

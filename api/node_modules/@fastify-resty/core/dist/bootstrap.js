"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bootstrap = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = tslib_1.__importDefault(require("path"));
const qs_1 = tslib_1.__importDefault(require("qs"));
const injector_1 = tslib_1.__importDefault(require("./injector"));
const symbols_1 = require("./symbols");
const configurations_1 = require("./configurations");
function bootstrap(fastifyInstance, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const config = configurations_1.createAppConfig(options);
        const controllers = new Set();
        const injector = new injector_1.default();
        injector.registerInstance(symbols_1.FastifyToken, fastifyInstance);
        fastifyInstance.decorate(symbols_1.GlobalConfig, config);
        fastifyInstance.addHook('onRequest', (request) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            request.query = qs_1.default.parse(request.raw.url.replace(/\?{2,}/, '?').split('?')[1] || '');
        }));
        if (config.entry) {
            function loadDirectory(directoryPath) {
                const files = fs_1.default.readdirSync(directoryPath);
                files.forEach(file => {
                    const filePath = path_1.default.resolve(directoryPath, file);
                    if (fs_1.default.lstatSync(filePath).isDirectory()) {
                        return loadDirectory(path_1.default.resolve(directoryPath, file));
                    }
                    if (config.pattern.test(filePath)) {
                        controllers.add(require(filePath).default);
                    }
                });
            }
            loadDirectory(config.entry);
        }
        if (config.controllers) {
            config.controllers.forEach(controller => controllers.add(controller));
        }
        const controllersInstances = Array.from(controllers)
            .filter(controller => (controller === null || controller === void 0 ? void 0 : controller.prototype) && Reflect.hasMetadata('fastify-resty:controller', controller.prototype))
            .map((controller) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            let controllerInstance;
            const controllerMetadata = Reflect.getMetadata('fastify-resty:controller', controller.prototype);
            yield fastifyInstance.register((instance) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                controllerInstance = injector.getInstance(controller);
                if (typeof controllerInstance[symbols_1.Initialize] === 'function') {
                    controllerInstance[symbols_1.Initialize](instance, config.defaults);
                }
                if (Reflect.hasMetadata('fastify-resty:definitions', controllerInstance)) {
                    const schemaDefinitions = Reflect.getMetadata('fastify-resty:definitions', controllerInstance);
                    fastifyInstance.addSchema(Object.assign({ $id: `/${controllerInstance.model.name}.json` }, schemaDefinitions));
                }
                const handlersKeys = Reflect.getMetadata('fastify-resty:handlers', controller.prototype);
                if (handlersKeys) {
                    handlersKeys.forEach(handlerKey => {
                        const handlerOptions = Reflect.getMetadata('fastify-resty:handler', controller.prototype, handlerKey);
                        instance.route(Object.assign(Object.assign({}, handlerOptions), { handler: controller.prototype[handlerKey].bind(controllerInstance) }));
                    });
                }
                const hookKeys = Reflect.getMetadata('fastify-resty:hooks', controller.prototype);
                if (hookKeys) {
                    hookKeys.forEach(hookKey => {
                        const hookOptions = Reflect.getMetadata('fastify-resty:hook', controller.prototype, hookKey);
                        instance.addHook(hookOptions.event, controller.prototype[hookKey].bind(controllerInstance));
                    });
                }
            }), { prefix: (controllerMetadata === null || controllerMetadata === void 0 ? void 0 : controllerMetadata.route) || '/' });
            return controllerInstance;
        }));
        return {
            controllers: yield Promise.all(controllersInstances)
        };
    });
}
exports.bootstrap = bootstrap;
bootstrap[Symbol.for('skip-override')] = true;

import type { RouteOptions } from 'fastify';
import type { JSONSchema7 } from 'json-schema';
declare type Override<T1, T2> = Omit<T1, keyof T2> & T2;
export interface Constructable<T = any> {
    new (...args: any[]): T;
}
export declare type JSONSchema7Extended = JSONSchema7 & {
    _options?: {
        generated?: boolean;
        nullable?: boolean;
        hidden?: boolean;
    };
};
export interface IRequestSchema {
    body?: JSONSchema7;
    querystring?: JSONSchema7 | Record<string, JSONSchema7>;
    params?: Record<string, JSONSchema7>;
    response?: Record<string | number, JSONSchema7>;
    headers?: Record<string, JSONSchema7>;
}
export declare type IBaseControllerMethods = 'find' | 'findOne' | 'create' | 'patch' | 'patchOne' | 'update' | 'updateOne' | 'remove' | 'removeOne';
export declare type IControllerSchemas = {
    [key in IBaseControllerMethods]: IRequestSchema;
};
export declare type IRouteOptions = {
    [key in IBaseControllerMethods]: Partial<RouteOptions>;
};
export declare type Identifier = number | string;
export declare type ModifyResponse = {
    affected: number;
};
export interface IFindResponse<E> {
    data: E[];
    total?: number;
    limit?: number;
    offset?: number;
}
export interface IFindQuery {
    $limit?: number;
    $skip?: number;
    $select?: string[];
    $sort?: string | string[];
    $where?: IFindWhereQuery;
}
export interface IFindWhereQuery {
    $or?: {
        [key: string]: any;
    };
    [key: string]: any;
}
export interface IBaseModel<E extends object> {
    readonly name: string;
    find(query?: IFindQuery): Promise<E[]>;
    total(options?: IFindQuery): Promise<number>;
    create(data: E | E[]): Promise<{
        identifiers: Identifier[];
    }>;
    patch(query: IFindWhereQuery, raw: E): Promise<ModifyResponse>;
    update(query: IFindWhereQuery, raw: E): Promise<ModifyResponse>;
    remove(query: IFindWhereQuery): Promise<ModifyResponse>;
}
export declare type IInjectToken = string | symbol;
export interface IModelConfig {
    id: string;
    softDelete: boolean;
}
export declare type IModelOptions = Partial<IModelConfig>;
export interface IPagination {
    limit: number;
    total: boolean;
}
export interface IControllerConfig {
    id: string;
    methods: IBaseControllerMethods[];
    allowMulti: boolean;
    returning: boolean;
    pagination: boolean | IPagination;
}
export declare type IControllerOptions = Override<Partial<IControllerConfig>, {
    pagination?: boolean | Partial<IPagination>;
}>;
export interface ILoaderConfig {
    pattern: RegExp;
    controllers?: Constructable[];
    entry?: string;
}
export declare type IApplicationConfig = ILoaderConfig & {
    defaults: IControllerConfig & IModelConfig;
};
export declare type IApplicationOptions = Partial<ILoaderConfig> & {
    defaults?: IControllerOptions & IModelOptions;
};
export {};
